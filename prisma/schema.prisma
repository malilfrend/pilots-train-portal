generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("STORAGE_DATABASE_URL")
  directUrl = env("STORAGE_DATABASE_URL")
}

enum UserRole {
  PILOT
  INSTRUCTOR
  SUPER_ADMIN
}

enum AssessmentType {
  EVAL
  QUALIFICATION
  AVIATION_EVENT
  FLIGHT_DATA_ANALYSIS
}

enum CompetencyCode {
  APK
  COM
  FPA
  FPM
  LTW
  PSD
  SAW
  WLM
  KNO
}

// Базовый профиль пользователя
model UserProfile {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  birthDate     DateTime
  university    String?
  company       String?
  role          UserRole
  experience    String?       // Опыт работы
  position      String?       // Должность
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Связи с конкретными ролями
  pilot         Pilot?
  instructor    Instructor?
  superAdmin    Boolean       @default(false)
}

// Модель пилота
model Pilot {
  id            Int           @id @default(autoincrement())
  profile       UserProfile   @relation(fields: [profileId], references: [id])
  profileId     Int           @unique  // Один профиль - один пилот
  
  assessments   Assessment[]  // Оценки пилота
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Модель инструктора
model Instructor {
  id                  Int           @id @default(autoincrement())
  profile             UserProfile   @relation(fields: [profileId], references: [id])
  profileId           Int           @unique  // Один профиль - один инструктор
  createdAssessments  Assessment[]  // Оценки, созданные инструктором
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Assessment {
  id                Int                 @id @default(autoincrement())
  type              AssessmentType
  date              DateTime
  pilot             Pilot               @relation(fields: [pilotId], references: [id])
  pilotId           Int
  instructor        Instructor          @relation(fields: [instructorId], references: [id])
  instructorId      Int
  instructorComment String?
  competencyScores  CompetencyScore[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model CompetencyScore {
  id             Int           @id @default(autoincrement())
  competencyCode CompetencyCode
  score          Int
  assessment     Assessment    @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId   Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
