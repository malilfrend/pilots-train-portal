generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("STORAGE_DATABASE_URL")
  directUrl = env("STORAGE_DATABASE_URL")
}

enum UserRole {
  PILOT
  INSTRUCTOR
  SUPER_ADMIN
}

// Типы оценки (источники оценки)
enum AssessmentSourceType {
  PC            // Proficiency check
  FDM          // Flight data monitoring
  EVAL          // Evaluation phase
  ASR            // Aviation safety report
}

enum CompetencyCode {
  PRO           // Procedures
  COM           // Communication
  FPA           // Flight Path Automation
  FPM           // Flight Path Manual
  LTW           // Leadership ans Teamwork
  PSD           // Problem Solving and Decision
  SAW           // Situational Awareness
  WLM           // Workload Management
  KNO           // Knowledge
}

// Базовый профиль пользователя
model UserProfile {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  birthDate     DateTime
  university    String?
  company       String?
  role          UserRole
  experience    String?       // Опыт работы
  position      String?       // Должность
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Связи с конкретными ролями
  pilot         Pilot?
  instructor    Instructor?
  superAdmin    Boolean       @default(false)
}

// Модель пилота
model Pilot {
  id              Int                @id @default(autoincrement())
  profile         UserProfile        @relation(fields: [profileId], references: [id])
  profileId       Int                @unique  // Один профиль - один пилот
  
  competencyScores PilotCompetencyScore[] // Оценки пилота по компетенциям
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Модель инструктора
model Instructor {
  id                  Int                @id @default(autoincrement())
  profile             UserProfile        @relation(fields: [profileId], references: [id])
  profileId           Int                @unique  // Один профиль - один инструктор
  createdScores       PilotCompetencyScore[] // Оценки, созданные инструктором
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

// Веса компетенций для разных источников
model CompetencyWeight {
  id              Int               @id @default(autoincrement())
  competencyCode  CompetencyCode    // Код компетенции (KNO, PRO, и т.д.)
  sourceType      AssessmentSourceType // Тип источника (KP, PADP, EVAL, AS)
  weight          Float             // Вес источника для данной компетенции (0.35, 0.1, и т.д.)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([competencyCode, sourceType]) // Уникальное сочетание компетенции и источника
}

// Оценки пилота по компетенциям от разных источников
model PilotCompetencyScore {
  id              Int                 @id @default(autoincrement())
  pilot           Pilot               @relation(fields: [pilotId], references: [id])
  pilotId         Int
  instructor      Instructor          @relation(fields: [instructorId], references: [id])
  instructorId    Int
  competencyCode  CompetencyCode      // Код компетенции
  sourceType      AssessmentSourceType // Тип источника оценки
  score           Int                 // Оценка по шкале (2-5)
  date            DateTime            // Дата выставления оценки
  comment         String?             // Комментарий инструктора
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([pilotId, competencyCode, sourceType]) // Уникальное сочетание пилота, компетенции и источника
}
